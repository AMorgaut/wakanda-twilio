/** * EXPERIMENTAL * * @module Twillio/core/httpRequestHandler * @author alexandre.morgaut@gmail.com **/var	PATH_BASE,	PATH_SHARED_WORKER;PATH_BASE = File(module.id + '.js').parent.path;PATH_SHARED_WORKER = PATH_BASE + 'sharedWorker.js';/** * @private * @method getResponseFromSharedWorker * @param {Object} request * @return {Object} **/function getResponseFromSharedWorker(request) {	var		worker,		response;	worker = new SharedWorker(PATH_SHARED_WORKER, 'wakanda-twilio/core');	worker.onmessage = function(messageEvent) {		response = messageEvent.data;		exitWait();	};	request.type = 'httprequest';	worker.postMessage(request);	wait();	return response; }/** * @private * @method parseBodyValues * @param {HTTPRequest} request * @return {Object} **/function parseBodyValues(request) {	var		params;	switch (request.contentType) {	case 'application/json':		params = JSON.parse(request.body);		break;	case 'application/x-www-form-urlencoded':		params = getURLQuery('http://foo.com/?' + request.body);		break;	case 'multipart/form-data':		params = {};		request.parts.forEach(			function parseMimePart(mimePart) {				switch (mimePart.mediaType.split('/')[0]) {				case 'image':					params[mimePart.name] = mimePart.asPicture();					break;				case 'video':					params[mimePart.name] = mimePart.asBlob();					break;				case 'application':					if (mimePart.mediaType.indexOf('json') > 0) {						params[mimePart.name] = JSON.parse(mimePart.asText());					} else if (mimePart.mediaType.indexOf('xml') > 0) {						params[mimePart.name] = mimePart.asText();					} else {						params[mimePart.name] = mimePart.asBlob();					}					break;				case 'text':					params[mimePart.name] = mimePart.asText();					break;				default:					params[mimePart.name] = mimePart.asBlob();				}			}		);		break;	default:		params = {};	}	return params;}/** * @private * @method Twilio_handleRequest * @param {HTTPRequest} request * @param {HTTPResponse} response **/function Twilio_handleRequest(request, response) {	var		resquestPath,		twimlId,		twiml,		twilioStore,		workerRequest,		workerResponse;		response.contentType = 'text/xml';	resquestPath = request.path.split('/');	if (resquestPath[1] === 'twiml-static') {		response.body = new File(application.getFolder().path + 'twilioScripts/' + resquestPath.pop());	} else {		workerRequest = {			type: 'httprequest',			path: request.path,			live: (resquestPath[1] === 'twiml-live')		};		if (workerRequest.live) {			workerRequest.twimlId = resquestPath.pop();		} else {			workerRequest.get = getURLQuery(request.rawURL);			if (request.contentType) {				workerRequest.post = parseBodyValues();			}		}		workerResponse = getResponseFromSharedWorker(workerRequest);		if (workerResponse.status) {			response.status = workerResponse.status;		}		if (workerResponse.headers) {			Object.keys(workerResponse.headers).forEach(function applyHeader(headerName) {				response.headers[headerName] = workerResponse.headers[headerName];			});		}		if (workerResponse.body) {			response.body = workerResponse.body;		}	}}