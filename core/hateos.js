/** * @module HATEOS * @doc http://en.wikipedia.org/wiki/HATEOAS **/  var 	baseURL; baseURL = 'https://api.twilio.com';/** * @method request * @private * @param {string} uri * @return Object | Error **/ function request(uri) {	var		xhr,		response;	if (uri) {		xhr = new XMLHttpRequest();		xhr.open('GET', baseURL + uri);		xhr.send();		if (xhr.status >= 400) {			response = new Error(xhr.statusText);			response.details = JSON.parse(xhr.reponseText);		} else {			response = JSON.parse(xhr.reponseText);			if (response.uri) {				exports.HateosInterface.apply(response);			}		}	} else {		response = null;	}	return response;}/** * @method applyHateos * @param {Object} coreData * @param {Object} [target] * @return Object **/exports.HateosInterface = function Twilio_Core_HateosInterface(coreData) {	var		self;	self = this;	if (!coreData) {		coreData = this;	}	this.coreData = coreData;	this.nbElements = coreData.total;	this.nbPages = coreData.num_pages;	this.pageSize = coreData.page_size;	this.firstPageIndex = coreData.start; // usually 0	this.currentPageIndex = coreData.page;	this.lastPageIndex = coreData.end;	Object.keys(coreData).some(		function findListName(name) {			if (coreData[name] instanceof Array) {				self.elements = coreData[name];				return true;			} else {				return false;			}		}	);	this.forEachElement = function forEachElement(callback, thisObj, autoPaging) {		var			page,			list;		if (autoPaging) {			page = (self.currentPageIndex === self.firstPageIndex) ? self : self.getFirstPage();		} else {			page = self;		}		list = page.elements;		list.forEach.call({}, callback, thisArg);		if (autoPaging) {			while (page.currentPageIndex !== page.lastPageIndex) {				page = page.getNextPage();				list.forEach.call({}, callback, thisArg);			}		}			};	/**	 * @method getFirstPage	 * @return Object	 **/	this.getFirstPage = function getFirstPage() {		// based on the "first_page_uri" URL		return request(coreDate.first_page_uri);	};	/**	 * @method getPreviousPage	 * @return Object	 **/	this.getPreviousPage = function getPreviousPage() {		// based on the "previous_page_uri" URL		return request(coreDate.previous_page_uri);	};	/**	 * @method reloadCurrentPage	 * @return Object	 **/	this.reloadCurrentPage = function reloadCurrentPage() {		// based on the "uri" URL		return result = request(coreDate.uri);	};	/**	 * @method getNextPage	 * @return Object	 **/	this.getNextPage = function getNextPage() {		// based on the "next_page_uri" URL		return request(coreDate.next_page_uri);	};	/**	 * @method getLastPage	 * @return Object	 **/	this.getLastPage = function getLastPage() {		// based on the "last_page_uri" URL		return request(coreDate.last_page_uri);	};}