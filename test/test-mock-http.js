var	PATTERN,	RESOURCES_BASE_PATH,	mockHttp,	requestHandler,	assert;assert = require('assert');mockHttp = require('./mock-twilio-httpRequestHandler');PATTERN = require('./mock-twilio').PATTERN;RESOURCES_BASE_PATH = mockHttp.RESOURCES_BASE_PATH;requestHandler = mockHttp.requestHandler;// Versionexports['test version'] = function Twilio_Test_MockHttp_Version() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'versions_instance.json');    httpRequest = {path: PATTERN + '.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, 'version assert');};// Accountsexports['test account list'] = function Twilio_Test_MockHttp_AccountList() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'accounts_list.json');    httpRequest = {path: PATTERN + '/Accounts.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, 'account list assert');};exports['test account instance'] = function Twilio_Test_MockHttp_AccountInstance() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'accounts_instance.json');    httpRequest = {path: PATTERN + '/Accounts/AC4bf2dafbed59a5733d2c1c1c69a83a28.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, 'account instance assert');};// Available Phone Numbersexports['test available phone numbers CA local'] = function Twilio_Test_MockHttp_AvailablePhoneNumbersCaLocal() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'available_phone_numbers_ca_local.json');    httpRequest = {path: PATTERN + '/Accounts/AC4bf2dafbed59a5733d2c1c1c69a83a28/AvailablePhoneNumbers/CA/Local.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, ' available phone numbers CA local assert');};exports['test available phone numbers US local'] = function Twilio_Test_MockHttp_AvailablePhoneNumbersUsLocal() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'available_phone_numbers_us_local.json');    httpRequest = {path: PATTERN + '/Accounts/AC4bf2dafbed59a5733d2c1c1c69a83a28/AvailablePhoneNumbers/US/Local.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, ' available phone numbers US local assert');};exports['test available phone numbers US toll free'] = function Twilio_Test_MockHttp_AvailablePhoneNumbersUsTollFree() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'available_phone_numbers_us_tollfree.json');    httpRequest = {path: PATTERN + '/Accounts/AC4bf2dafbed59a5733d2c1c1c69a83a28/AvailablePhoneNumbers/US/TollFree.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, ' available phone numbers US local assert');};// Callsexports['test calls list'] = function Twilio_Test_MockHttp_CallsList() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'calls_list.json');    httpRequest = {path: PATTERN + '/Accounts/AC4bf2dafbed59a5733d2c1c1c69a83a28/Calls.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, 'calls list assert');};exports['test calls instance'] = function Twilio_Test_MockHttp_CallsInstance() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'calls_instance.json');    httpRequest = {path: PATTERN + '/Accounts/AC4bf2dafbed59a5733d2c1c1c69a83a28/Calls/CA47e13748ed59a5733d2c1c1c69a83a28.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, 'calls instance assert');};// Conferencesexports['test conferences list'] = function Twilio_Test_MockHttp_ConferencesList() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'conferences_list.json');    httpRequest = {path: PATTERN + '/Accounts/AC4bf2dafbed59a5733d2c1c1c69a83a28/Conferences.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, 'conferences list assert');};exports['test conferences instance'] = function Twilio_Test_MockHttp_ConferencesInstance() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'conferences_instance.json');    httpRequest = {path: PATTERN + '/Accounts/AC4bf2dafbed59a5733d2c1c1c69a83a28/Conferences/CFe3bb5bfbed59a5733d2c1c1c69a83a28.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, 'conferences instance assert');};// Incoming Phone Numbersexports['test incoming phone numbers list'] = function Twilio_Test_MockHttp_IncomingPhoneNumbersList() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'incoming_phone_numbers_list.json');    httpRequest = {path: PATTERN + '/Accounts/AC4bf2dafbed59a5733d2c1c1c69a83a28/IncomingPhoneNumbers.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, 'incoming phone numbers list assert');};exports['test incoming phone numbers  instance'] = function Twilio_Test_MockHttp_IncomingPhoneNumbersInstance() {	var httpRequest, httpResponse, file;	file = new File(RESOURCES_BASE_PATH + 'incoming_phone_numbers_instance.json');    httpRequest = {path: PATTERN + '/Accounts/AC4bf2dafbed59a5733d2c1c1c69a83a28/IncomingPhoneNumbers/CFe3bb5bfbed59a5733d2c1c1c69a83a28.json'};	httpResponse = {};		httpResponse.body = requestHandler(httpRequest, httpResponse);    assert.strictEqual(httpResponse.body.path, file.path, 'incoming phone numbers instance assert');};