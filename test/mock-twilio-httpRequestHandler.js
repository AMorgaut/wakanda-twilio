/*global File, module*//*jslint indent: 4 */var    RESOURCES_BASE_PATH,    PART_TYPE_SERVICE_NAME,    PART_TYPE_SID,    ACCOUNTS,    LIST,    INSTANCE,    SERVICES;function requestHandler(request, response) {	"use strict";    var        uriParts,        part,        partType,        serviceModel,        resourceFileName,        suffix;	function parseSubresource() {        serviceModel = serviceModel.subresources[part];		if (serviceModel.mockFilePrefix) {			if (serviceModel.mockFilePrefix[0] !== '_') {				resourceFileName = serviceModel.mockFilePrefix;			} else {				resourceFileName += serviceModel.mockFilePrefix;			}		}		return resourceFileName;	}    resourceFileName = 'versions';    serviceModel = SERVICES;    uriParts = request.path.split('/');    partType = PART_TYPE_SID;    part = uriParts.shift();    while (uriParts.length) {        if (partType === PART_TYPE_SERVICE_NAME) {            switch (part) {            case 'Usage':            case 'SMS':                // Namespaces                serviceModel = serviceModel.subresources[part];                break;            default:                parseSubresource();                partType = PART_TYPE_SID;            }        } else {            partType = PART_TYPE_SERVICE_NAME;            if (resourceFileName === "available_phone_numbers") {            	resourceFileName += '_' + part.toLowerCase();            }        }        part = uriParts.shift();    }    part = part.split('.json')[0];    if (partType === PART_TYPE_SERVICE_NAME) {        parseSubresource();        if (part === 'SandBox') {	        suffix = INSTANCE;		} else if (serviceModel.mockFilePrefix && serviceModel.mockFilePrefix[0] === '_') {			suffix = '';		} else {			suffix = LIST;		}    } else if (partType === PART_TYPE_SID) {        suffix = INSTANCE;    } else {        suffix = serviceModel.mockFilePrefix;    }    resourceFileName += suffix;    //serviceParams = getURLQuery('http://foo.com/?' + ((request.method === 'POST' || request.method === 'PUT') ? request.body : request.urlQuery));    response.contentType = 'application/json';    return new File(RESOURCES_BASE_PATH + resourceFileName + '.json');}/** * INITIALISATION **/RESOURCES_BASE_PATH = (new File(module.id + '.js').parent.path) + 'resources/';PART_TYPE_SERVICE_NAME = 0;PART_TYPE_SID = 1;ACCOUNTS = 'Accounts';LIST = '_list';INSTANCE = '_instance';SERVICES = require('./mock-twilio-servicemap');/** * MODULE API **/ exports.RESOURCES_BASE_PATH = RESOURCES_BASE_PATH;exports.requestHandler = requestHandler;